/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/assets/3d/models/shoe.glb 
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useSnapshot } from 'valtio';
import { shoeColorStore } from '@/store/shoeColorStore';
import { useFrame } from '@react-three/fiber';


export function ShoeModel(props) {
const { nodes, materials } = useGLTF('/assets/3d/models/shoe.glb')
  const snap = useSnapshot(shoeColorStore);
  const [hoveredShoePart, setHoveredShoePart] = useState(null);

  useEffect(() => {
      const defaultCursor = `
    <svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/>
      <path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/>
    </svg>`; // Curseur par défaut de la souris

    const customCursor = `
    <svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clip-path="url(#clip0)">
        <path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/>
        <g filter="url(#filter0_d)">
          <path d="M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z" fill="${snap.colors[hoveredShoePart]}" />
        </g>
        <path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/>
        <text fill="#000" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em">
          <tspan x="35" y="63">${hoveredShoePart}</tspan>
        </text>
      </g>
      <defs>
        <clipPath id="clip0"><path fill="#fff" d="M0 0h64v64H0z"/></clipPath>
        <filter id="filter0_d" x="6" y="8" width="47" height="47" filterUnits="userSpaceOnUse">
          <feFlood flood-opacity="0" result="BackgroundImageFix"/>
          <feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
          <feOffset dy="2"/>
          <feGaussianBlur stdDeviation="3"/>
          <feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/>
          <feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/>
          <feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
        </filter>
      </defs>
    </svg>`;

    if(hoveredShoePart){
      document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(customCursor)}'), auto`;
    }else{
      document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(defaultCursor)}'), auto`;
    }
    
  }, [hoveredShoePart]);

  const groupRef = useRef();

  // anime le modèle (objet) 3D référencé par groupRef dans une boucle temps réel avec useFrame
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    
    groupRef.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20
    groupRef.current.rotation.x = Math.cos(t / 4) / 8
    groupRef.current.rotation.y = Math.sin(t / 4) / 8
    groupRef.current.position.y = (1 + Math.sin(t / 1.5)) / 10
  })


  return (
    <group {...props} dispose={null}
      ref={groupRef}
      onPointerOver={
        (e) => {
          e.stopPropagation();
          setHoveredShoePart(e.object.material.name);
        }
      }
      onPointerOut={
        (e) => {
          if(e.intersections.length === 0){ // vérifie si la souris ne survole plus aucun objet 3D du groupe au moment où elle quitte un de ces objets.
            setHoveredShoePart(null);
          }
        }
      }
      onPointerMissed={() => {
        shoeColorStore.selectedShoePart = null;
      }}
      onPointerDown={(e) => {
        e.stopPropagation();
        shoeColorStore.selectedShoePart = e.object.material.name;
      }}
    >
      <mesh geometry={nodes.shoe.geometry} material={materials.laces} 
        receiveShadow={true}
        castShadow={true}
        material-color={shoeColorStore.colors.laces}
      />
      <mesh geometry={nodes.shoe_1.geometry} material={materials.mesh} 
        receiveShadow={true}
        castShadow={true}
        material-color={shoeColorStore.colors.mesh}
      />
      <mesh geometry={nodes.shoe_2.geometry} material={materials.caps} 
        receiveShadow={true}
        castShadow={true}
        material-color={shoeColorStore.colors.caps}
      />
      <mesh geometry={nodes.shoe_3.geometry} material={materials.inner} 
        receiveShadow={true}
        castShadow={true}
        material-color={shoeColorStore.colors.inner}
      />
      <mesh geometry={nodes.shoe_4.geometry} material={materials.sole} 
        receiveShadow={true}
        castShadow={true}
        material-color={shoeColorStore.colors.sole}
      />
      <mesh geometry={nodes.shoe_5.geometry} material={materials.stripes} 
        receiveShadow={true}
        castShadow={true}
        material-color={shoeColorStore.colors.stripes}
      />
      <mesh geometry={nodes.shoe_6.geometry} material={materials.band} 
        receiveShadow={true}
        castShadow={true}
        material-color={shoeColorStore.colors.band}
      />
      <mesh geometry={nodes.shoe_7.geometry} material={materials.patch} 
        receiveShadow={true}
        castShadow={true}
        material-color={shoeColorStore.colors.patch}
      />
    </group>
  )
}

useGLTF.preload('/assets/3d/models/shoe.glb')

// receiveShadow={true} 
// castShadow={true}

// Composant React représentant le modèle 3D du chaussure